Categories Discussions Choose the right package every time Openbase helps you choose packages with reviews, metrics & categories.  Learn more Categories Leaderboard Feedback Sign up with GitHub By signing up, you agree to our  terms of service  and  privacy policy Log In What's Openbase? ‚Ä¢ Help ‚Ä¢ Send Feedback 10 Best React Dropdown Libraries List hand-picked by Openbase Experts Learn More rc-dropdown React Dropdown Follow MIT TypeScript Definitions:  Built-In GitHub Stars 146 Weekly Downloads 931K Last Commit 7mos ago Bundle Size (min+gzip) Tree-Shakeable User Rating 5.0 / 5 1 Top Feedback 1 Easy to Use rm @szhsin/react-menu React component for building accessible menu, dropdown, submenu, context menu and more. Follow MIT TypeScript Definitions:  Built-In GitHub Stars 767 Weekly Downloads 35.3K Last Commit 6mos ago Bundle Size (min+gzip) Tree-Shakeable User Rating 5.0 / 5 1 Top Feedback downshift üèé A set of primitives to build simple, flexible, WAI-ARIA compliant React autocomplete, combobox or select dropdown components. Follow MIT TypeScript Definitions:  Built-In GitHub Stars 10.8K Weekly Downloads 2.3M Last Commit 1yr ago Bundle Size (min+gzip) Tree-Shakeable User Rating 4.6 / 5 14 Top Feedback 9 Highly Customizable 5 Great Documentation 4 Easy to Use Openbase Discover Search Categories Discuss What is Openbase? Help Center Contact Us Openbase for Business Package Maintainers Claim Package Page Promote Package Page Advertise on Openbase Open-Source Insights API Company About Careers Blog Media Kit Privacy Terms Openbase is the leading platform for developers to discover and choose open-source Browse Categories JavaScript All JavaScript Categories Vanilla JS Categories React Categories Vue Categories Angular Categories jQuery Categories Bootstrap Categories Material-UI Categories Svelte Categories Node.js Categories Express.js Categories Next.js Categories Gatsby Categories React Native Categories Python All Python Categories Vanilla Python Categories Django Categories Flask Categories AsyncIO Categories Openbase is the leading platform for developers to discover and choose open-source ¬© 2022 Openbase, Inc.
--
https://openbase.com/categories/js/best-react-dropdown-libraries

---
   skip to package search or skip to sign in ‚ù§ Nimble Package Maestros Products Pro Teams Pricing Documentation npm Search Sign Up Sign In  react-dropdown 1.11.0 ‚Ä¢ Public ‚Ä¢¬†Published 20 days ago Readme Explore BETA 1 Dependency 137 Dependents 46 Versions  react-dropdown    Simple Dropdown component for React, inspired by react-select  Why   The default HTML select element is hard to style  And sometime we also want grouped menus  if you want more advanced select, check react-select    Installation  // with npm
$ npm install react-dropdown  --save

// with yarn
$ yarn add react-dropdown  Changelog  If you want to support React version under v0.13, use react-dropdown@v0.6.1  Usage  This is the basic usage of react-dropdown  import  Dropdown  from  'react-dropdown' ;  import  'react-dropdown/style.css' ;  const  options  =  [  'one' ,  'two' ,  'three'  ] ;  const  defaultOption  =  options [ 0 ] ;  < Dropdown  options = { options }  onChange = { this . _onSelect }  value = { defaultOption }  placeholder = "Select an option"  / > ;  Options  Flat Array options  const  options  =  [  'one' ,  'two' ,  'three'  ] ;  Object Array options  const  options  =  [  {  value : 'one' ,  label : 'One'  } ,  {  value : 'two' ,  label : 'Two' ,  className : 'myOptionClassName'  } ,  {  type : 'group' ,  name : 'group1' ,  items : [  {  value : 'three' ,  label : 'Three' ,  className : 'myOptionClassName'  } ,  {  value : 'four' ,  label : 'Four'  }  ]  } ,  {  type : 'group' ,  name : 'group2' ,  items : [  {  value : 'five' ,  label : 'Five'  } ,  {  value : 'six' ,  label : 'Six'  }  ]  }  ] ;  When using Object options you can add to each option a className string to further customize the dropdown, e.g. adding icons to options  Disabling the Dropdown  Just pass a disabled boolean value to the Dropdown to disable it. This will also give you a .Dropdown-disabled class on the element, so you can style it yourself.  < Dropdown  disabled  onChange = { this . _onSelect }  value = { defaultOption }  placeholder = "Select an option"  / > ;  Customizing the dropdown  className  The className prop is passed down to the wrapper div , which also has the Dropdown-root class.  < Dropdown  className = 'myClassName'  / > ;  controlClassName  The controlClassName prop is passed down to the control div , which also has the Dropdown-control class.  < Dropdown  controlClassName = 'myControlClassName'  / > ;  placeholderClassName  The placeholderClassName prop is passed down to the placeholder div , which also has the Dropdown-placeholder class.  < Dropdown  placeholderClassName = 'myPlaceholderClassName'  / > ;  menuClassName  The menuClassName prop is passed down to the menu div (the one that opens and closes and holds the options), which also has the Dropdown-menu class.  < Dropdown  menuClassName = 'myMenuClassName'  / > ;  arrowClassName  The arrowClassName prop is passed down to the arrow span , which also has the Dropdown-arrow class.  < Dropdown  arrowClassName = 'myArrowClassName'  / > ;  arrowClosed , arrowOpen  The arrowClosed & arrowOpen props enable passing in custom elements for the open/closed state arrows.  < Dropdown  arrowClosed = { < span  className = "arrow-closed"  / > }  arrowOpen = { < span  className = "arrow-open"  / > }  / > ;  Check more examples in the example folder.  Run example  $ npm start  License  MIT | Build for CSViz project @ Wiredcraft  Keywords react react-component component dropdown select Install npm i react-dropdown Repository github.com/fraserxu/react-dropdown Homepage github.com/fraserxu/react-dropdown Weekly Downloads 100,539 Version 1.11.0 License MIT Unpacked Size 24 kB Total Files 6 Last publish 20 days ago Collaborators Try on RunKit Report malware  Return to top of page Support Help Advisories Status Contact npm Company About Blog Press Terms & Policies Policies Terms of Use Code of Conduct Privacy    
--
https://www.npmjs.com/package/react-dropdown

---
                                                                                      Blog   Dev Product Management  Podcast Meetups       Sign In  Start monitoring for free              Share                         Reply    11                  Doƒüacan Bilgili Follow  A software developer who is also into 3D-modeling and animation.    Customize a reusable React dropdown menu component    June 15, 2022   8 min read  2309      Editor‚Äôs note : This article was last updated 15 June 2022 to make the example component reusable and include information about popular dropdown component libraries.  When it comes to adding styling and other specific requirements to your application, adapting an existing component into your project might not always go as smoothly as you‚Äôd like. Considering the time you might spend on the adaptation process, building your own component may be in your best interest.  A dropdown component, which is a custom version of the dropdown select option with extended styles , sorts and filters content on webpages. In this tutorial, we‚Äôll walk through an approach that I‚Äôve followed in my personal projects to create a custom dropdown menu component in React.  For the complete source code and the styling files, you can refer to the GitHub repo . Let‚Äôs get started!   The visual structure of a dropdown menu component  Parent-child relations in dropdown components  Controlling a parent state from a child component  Single or multi-select dropdown   Dynamic header title  Single-select dropdown menu  Multi-select dropdown menu    Handling outside clicks  Popular dropdown component libraries   The visual structure of a dropdown menu component  Before diving into the technical stuff, let‚Äôs quickly understand the visual structure of the dropdown menu component to decide on the requirements:   A dropdown menu consists of four basic components: the header wrapping, header title, list wrapping, and list items.  The corresponding HTML would look like the following code:  <div className="dd-wrapper">
  <div className="dd-header">
    <div className="dd-header-title"></div>
  </div>
  <div className="dd-list">
    <button className="dd-list-item"></button>
    <button className="dd-list-item"></button>
    <button className="dd-list-item"></button>
  </div>
</div>  We need to be able to toggle the dd-list upon clicking dd-header and close it when the user clicks outside of the dd-wrapper . We also need to populate the <button> tags automatically based on the data, and we need to be able to dynamically control the header title.  Keep in mind that you should not use a dropdown component if you are looking to display and compare nested items, or if you only have two options to choose from. In that case, a radio button would be a better option.  Parent-child relations in dropdown components  A parent component holds a single or multiple dropdown menus. Since each dropdown menu has unique content, we need to parameterize it by passing information as props. Let‚Äôs imagine that we have a dropdown menu where we can select multiple locations.  Consider the following state variable inside the parent component:  constructor(){
  super()
  this.state = {
    location: [
      {
          id: 0,
          title: 'New York',
          selected: false,
          key: 'location'
      },
      {
          id: 1,
          title: 'Dublin',
          selected: false,
          key: 'location'
      },
      {
          id: 2,
          title: 'California',
          selected: false,
          key: 'location'
      },
      {
          id: 3,
          title: 'Istanbul',
          selected: false,
          key: 'location'
      },
      {
          id: 4,
          title: 'Izmir',
          selected: false,
          key: 'location'
      },
      {
          id: 5,
          title: 'Oslo',
          selected: false,
          key: 'location'
      }
    ]
   }
  }  In the code above, when populating the location array, we have a unique id to use with a key prop of map method. We have a title for each item in the list, a boolean variable called selected to toggle the selected items in the list in case of multiple selections in a dropdown menu, and finally, a key variable, which comes in handy for using with the setState function. We‚Äôll cover that later.  Let‚Äôs take a look at what we‚Äôve passed to the Dropdown component as props so far. Below, you‚Äôll see the Dropdown component used in a parent component where we have passed a title and an array of data to populate the dropdown list:  <Dropdown  
  title="Select location"
  list={this.state.location}
/>  Before editing the render() method, we need to include the following state variables in our Dropdown component:  <constructor(props){
  super(props)
  this.state = {
    isListOpen: false,
    headerTitle: this.props.title
  }
}  We have a boolean variable called isListOpen for toggling the menu list and a headerTitle , which is equal to the title prop by default.  Now, take a look at the render() method of our component. Note that the Font Awesome package used in the render JSX markup is an external npm package. You should install it and import it inside the Dropdown component as follows:  import FontAwesome from 'react-fontawesome';  You also need to include the following <link> tag in the index.html of your project, which is required for Font Awesome¬†to work properly:  <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />  In the render() method, we have the aforementioned structure with the header and the list containing the list items. You‚Äôll notice that we have toggleList() and selectItem() functions used in the render method. Let‚Äôs create those functions now:  render() {
  const { isListOpen, headerTitle } = this.state;
  const { list } = this.props;

  return (
    <div className="dd-wrapper">
      <button
        type="button"
        className="dd-header"
        onClick={this.toggleList}
      >
        <div className="dd-header-title">{headerTitle}</div>
        {isListOpen
          ? <FontAwesome name="angle-up" size="2x" />
          : <FontAwesome name="angle-down" size="2x" />}
      </button>
      {isListOpen && (
        <div
          role="list"
          className="dd-list"
        >
          {list.map((item) => (
            <button
              type="button"
              className="dd-list-item"
              key={item.id}
              onClick={() => this.selectItem(item)}
            >
              {item.title}
              {' '}
              {item.selected && <FontAwesome name="check" />}
            </button>
          ))}
        </div>
      )}
    </div>
  )
}  The toggleList() function simply toggles the isListOpen state variable, showing or hiding the items list:  toggleList = () => {
   this.setState(prevState => ({
     isListOpen: !prevState.isListOpen
  }))
}  The selectItem() function, on the other hand, sets the headerTitle state to a selected item‚Äôs title and sets the isListOpen state to false to close the list upon selection.  After setting these states, it calls the resetThenSet() callback function, which is a prop we need to pass to Dropdown / .¬†Calling this callback function updates the location state in the parent component, marking the clicked list item as selected :  selectItem = (item) => {
  const { resetThenSet } = this.props;
  const { title, id, key } = item;

  this.setState({
    headerTitle: title,
    isListOpen: false,
  }, () => resetThenSet(id, key));
}   Controlling a parent state from a child component  When you pass something as a prop to a child component, you can only use that data, and you cannot change it unless you deploy additional props. If you define a function in the parent component, which controls the state, and then pass this function as a prop to child component, then you can call this function from the child component and set the parent component‚Äôs state.  In the case of the dropdown menu, when a list element is clicked, we need to be able to toggle the selected key for the corresponding object in the location state of the parent component. We do so by passing the resetThenSet() function as a prop to Dropdown component.  The resetThenSet() function clones the location state, then sets the selected key of each object in the array to false . Then, it only sets the clicked item‚Äôs selected key to true , hence the name resetThenSet .          Over 200k developers use LogRocket to create better digital experiences  Learn more ‚Üí      We define this function¬†in the parent component:  resetThenSet = (id, key) => {
  const temp = [...this.state[key]];

  temp.forEach((item) => item.selected = false);
  temp[id].selected = true;

  this.setState({
    [key]: temp,
  });
}  We then pass the function to the <Dropdown /> component as a prop:  <Dropdown
  title="Select location"
  list={this.state.location}
  resetThenSet={this.resetThenSet}
/>  Single or multi-select dropdown  So far, the setup we‚Äôve used is required for a single-select dropdown. However, if we want to be able to select multiple items in the dropdown menu, we need a different function in place of resetThenSet() .  We‚Äôll name that function toggleItem() because it only toggles the selected key of the items in the location array:  toggleItem = (id, key) => {
  const temp = [...this.state[key]];

  temp[id].selected = !temp[id].selected;

  this.setState({
    [key]: temp,
  });
}  Then, we pass this function as a prop like we did before:  <Dropdown
  title="Select location"
  list={this.state.location}
  toggleItem={this.toggleItem}
/>  When using the function in the <Dropdown/> component, we can directly call it without an intermediate function. This approach is different than the one we followed for a single select dropdown,¬†given that we don‚Äôt need to set the headerTitle or close the list.  However, we still need to handle the headerTitle so that we can show how many locations are selected:  render() {
  const { list, toggleItem } = this.props;

  return (
    //
    //
      <button
        type="button"
        className="dd-list-item"
        key={item.id}
        onClick={() => toggleItem(item.id, item.key)}
      >
    //
    //
  )
}  Dynamic header title  As previously mentioned, we didn‚Äôt set the headerTitle in the case of a multi-select dropdown. However, regardless of whether it‚Äôs a single or multi-select dropdown, we need to handle the headerTitle separately due to the fact that the list array passed might contain items with the selected key set to true by default. The component should be able to detect this and set the headerTitle accordingly.  To handle this, we‚Äôll use the static getDerivedStateFromProps lifecycle Hook.  The purpose of getDerivedStateFromProps is to enable a component to update its internal state as a result of changes in props. It should return an object to update the state or return null if nothing needs to be updated.  Single-select dropdown menu  First, filter the list prop to see if there is any object with the selected key set to true . If there is one, that will be returned and will be made available in selectedItem . Then, we use this object‚Äôs title key to set the headerTitle . If selectedItem is empty, then we simply return an object where we set the title prop to headerTitle :  static getDerivedStateFromProps(nextProps) {
  const { list, title } = nextProps;
  const selectedItem = list.filter((item) => item.selected);

  if (selectedItem.length) {
    return {
      headerTitle: selectedItem[0].title,
    };
  }
  return { headerTitle: title };
}  Multi-select dropdown menu  When dealing with a multi-selection dropdown menu, we check the length of the items with the selected key set to true . If this count is equal to 0 , then we simply set headerTitle to the default title prop.  If the count is equal to 1 , then we use a prop called titleHelper . In our case, this is a string value equal to "Location" , allowing us to display 1 location on the title.   More great articles from LogRocket:   Don't miss a moment with The Replay , a curated newsletter from LogRocket  Learn how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app  Use React's useEffect to optimize your application's performance  Switch between multiple versions of Node  Discover how to animate your React app with AnimXYZ  Explore Tauri , a new framework for building binaries  Compare NestJS vs. Express.js    If the count is greater than 1 , then we use the plural form of location , which we provide to our component through the titleHelperPlural prop. In our case, this prop is equal to "Locations" :  static getDerivedStateFromProps(nextProps) {
  const {
    list,
    title,
    titleHelper,
    titleHelperPlural
  } = nextProps;

  const count = list.filter((item) => item.selected).length;

  if (count === 0) {
    return { headerTitle: title };
  }
  if (count === 1) {
    return { headerTitle: `${count} ${titleHelper}` };
  }
  if (count > 1) {
    return { headerTitle: `${count} ${titleHelperPlural}` };
  }
  return null;
}  So, our component will have the following props if it‚Äôs a multi-select dropdown:  <Dropdown
  titleHelper="Location"
  titleHelperPlural="Locations"
  title="Select location"
  list={this.state.location}
  toggleItem={this.toggleItem}
/>   Handling outside clicks  The last thing we need to handle is closing the dropdown menu when a user clicks outside of it.¬†It is quite straightforward to listen to click events on the window object and toggle the isListOpen state variable. However, this approach requires some small tricks to make it work properly.  Consider the following code snippet where we add an event listener to the window object that depends on the isListOpen state variable. However, this attempt results in a tooltip opening and closing almost simultaneously:  close = () => {
  this.setState({
    isListOpen: false,
  });
}

componentDidUpdate(){
  const { isListOpen } = this.state;

  if(isListOpen){
    window.addEventListener('click', this.close)
  }
  else{
    window.removeEventListener('click', this.close)
  }
}  The solution is to use the setTimeout method with either a 0 millisecond delay or without any time delay defined. Therefore, it queues a new task to be executed by the next event loop. Although using 0 milliseconds usually describes a task that should be executed immediately, this is not the case with the single-thread synchronous nature of JavaScript. When the setTimeout is used, it simply creates an asynchronous callback. You can refer to the specific MDN web docs for a detailed explanation on the topic:  componentDidUpdate(){
  const { isListOpen } = this.state;

  setTimeout(() => {
    if(isListOpen){
      window.addEventListener('click', this.close)
    }
    else{
      window.removeEventListener('click', this.close)
    }
  }, 0)
}  There is one more thing we need to take into account. When using the dropdown menu in multi-select mode, it is likely that we don‚Äôt want to close the list when an item is selected, unlike in single select mode. To fix this issue, we need to call the stopPropagation() method on the onClick event of the list items.  Doing so prevents propagation of the same event bubbling up to the parent elements and therefore keeps the item list open when items are being clicked:  <button
  type="button"
  className="dd-list-item"
  key={item.id}
  onClick={(e) => {
    e.stopPropagation();
    this.selectItem(item);
  }}
>  Popular dropdown component libraries  Although though this tutorial covered all the steps involved in building a reusable¬†dropdown component from scratch, there are some popular dropdown component libraries based on React that you can leverage to achieve the same goal. The list below includes some libraries and their corresponding weekly downloads on the npm registry at the time of writing:   rc-dropdown : 909,409 weekly downloads  react-dropdown : 84,472 weekly downloads  react-dropdown-select : 20,355 weekly downloads  React Simple Dropdown : 11,874 weekly downloads   Conclusion  In this tutorial, we structured a dropdown menu component that supports both single and multi-select functionalities. We learned how to control the parent component‚Äôs state from a child component by passing functions as props to child component and calling them inside the child component.  In addition, we used the static getDerivedStateFromProps method to update the state variables upon prop changes.  Note that this tutorial just gives an introductory approach on how to create a custom dropdown menu. To create a fully fledged dropdown component, you need to bear accessibility in mind as well. I hope you enjoyed this article, and happy coding!  Full visibility into production React apps Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you‚Äôre interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, try LogRocket . LogRocket is like a DVR for web and mobile apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more. The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. Modernize how you debug your React apps ‚Äî start monitoring for free .   Share this: Twitter Reddit LinkedIn Facebook          Doƒüacan Bilgili Follow  A software developer who is also into 3D-modeling and animation.      Uncategorized   #react     ¬´ Stylify vs. Master Styles: Comparing Tailwind-like CSS utility libraries  How to test React Hooks ¬ª              Learn how to read a file in Rust            Ikeh Akinyemi  Oct 14, 2022   8 min read                   Understanding Vue.js touch events for Android and iOS            Pelumi Akintokun  Oct 14, 2022   6 min read                   Build a web application with Hono            Clara Ekekenta  Oct 14, 2022   4 min read                    11 Replies to ‚ÄúCustomize a reusable React dropdown menu component‚Äù        alex p  says:    August 4, 2019 at 3:48 am     The code snippets are not accurate. I tried following along but your syntax errors were too confusing to try to fix. Look at the portion where you introduce FontAwesome for random angle brackets and closing divs with no opens.           bnevilleoneill  says:    August 5, 2019 at 11:40 am     Hi, Alex. Should be all set now. This isn‚Äôt Doƒüacan‚Äôs mistake. The formatting got borked when we migrated the blog to wordpress. Thanks for pointing it out (and sorry for the hassle).             Dani  says:    October 4, 2019 at 11:13 am     This tutorial is not bad (you can actually use functions with hooks and avoid using classes), but without the styles for the components I can‚Äôt really see the example that you produce here. So I would add a codepen or something with the whole component.           Doƒüacan Bilgili  says:    October 6, 2019 at 8:58 am     Hey Dani, That‚Äôs true that now you can do that with hooks, but that was not an option back then when this tutorial was written. As for the styling, you can actually find the complete source code in the GitHub repo which I linked at the very beginning of this article.           Dollar Sharma  says:    November 4, 2019 at 5:59 am     Hi,  Can we have this example with react hooks/ Functional Component if possible           Krishna Reddy  says:    January 6, 2020 at 12:59 pm     this is not working           Apostolis  says:    January 30, 2020 at 11:18 am     Im not sure how useful this tutorial is as I did not try it üôÇ But just by looking the code, I saw that it is not working as it should. A custom select should be accessible through a keyboard, like html select is, for accessibility reasons and for you to be able to select an option from your keyboard. So this tutorial has these things wrong: ‚Äì No `role=‚Äùoption‚Äù` and `role=‚Äùlistbox‚Äù` attributes were set ‚Äì There are no handlers for simulating a default‚Äôs ‚Äúselect‚Äù behavior, like navigating with the arrows. ‚Äì It‚Äôs inaccessible           Ousama Lasri  says:    July 7, 2020 at 8:07 am     I was about to start reading the tutorial, when I come across your review I changed my mind. thank you Mr. You are a time saver üòâ           Chuka Manafa  says:    September 9, 2020 at 11:21 am     I got an error ‚ÄútoggleItem is not defined‚Äù when I passed the toggle item to the list item. Please I need and urgent help.           Ben J  says:    March 9, 2021 at 9:50 pm     One instance of incorrect code: isOpen should be isListOpen in the componentDidUpdate snippet!           piouson  says:    August 3, 2021 at 9:59 am     Hey man just wanna say thank you and keep up the good work! Found myself creating a custom select and was missing the setTimeout bit for ‚Äúhandling outside clicks‚Äù, funny you stuck that at the end of the post lol        Leave a Reply Cancel reply                        Search Search                                                                                                                             Loading Comments...         Write a Comment...      Email (Required)     Name (Required)     Website                                                                                  
--
https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/

---
    All Products Product Bundles DevCraft All Telerik .NET tools and Kendo UI JavaScript components in one package. Now enhanced with: NEW : Design Kits for Figma Online Training Document Processing Library Embedded Reporting for web and desktop Web Kendo UI  UI for jQuery  UI for Angular  UI for React  UI for Vue  UI for ASP.NET AJAX  UI for ASP.NET MVC  UI for ASP.NET Core  UI for Blazor  UI for Silverlight  UI for PHP  UI for JSP Mobile UI for .NET MAUI  UI for Xamarin Document Management Telerik Document Processing Desktop UI for .NET MAUI  UI for WinUI  UI for WinForms  UI for WPF  UI for UWP Reporting & Mocking Telerik Reporting  Telerik Report Server  Telerik JustMock Automated Testing Test Studio  Test Studio Dev Edition CMS Sitefinity UI/UX Tools ThemeBuilder Debugging Fiddler  Fiddler Everywhere  Fiddler Classic  Fiddler Jam  FiddlerCap  FiddlerCore Extended Reality UI for Unity XR Free Tools JustAssembly  JustDecompile  VB.NET to C# Converter  Testing Framework View all products Demos Services Blogs Docs & Support Pricing  Search  Shopping cart  Login  Contact Us Get A Free Trial close mobile menu           A Quick Guide to Dropdown Menus With React      by Thomas Findlay    August 31, 2021   Web , React    0 Comments                               You probably encounter even more dropdowns than you realize. Let‚Äôs explore some of the types of dropdowns you can use when building your next React application.  Dropdowns are a feature common to many websites. They are very useful, as they make it easy to show additional data only when it is needed. For instance, if we want a user to select their country of origin, a list of countries won‚Äôt be visible until a user clicks on the country dropdown. Another good example is autocomplete functionality. When a user is searching for an item, you can display a dropdown with a list of suggestions that can help complete the search faster.  Let‚Äôs explore some of the types of dropdowns you might make use of in your application.  Types of Dropdowns  You probably encounter a bunch of dropdowns in your daily life, whether or not you think much about them.  For instance, using the Google search bar will bring up an autocomplete dropdown:   Similarly, YouTube uses an autocomplete dropdown to show suggestions for videos:   Autocomplete is not the only functionality for which dropdowns are used. For instance, a lot of websites utilize dropdowns for their navigation, like Target:   If a simple navigation dropdown wasn‚Äôt enough, there are websites that incorporate mega-dropdown menus. These are often used by e-commerce websites that may have a lot of links for categories and products. One of them is Asda:   Another example is a context dropdown menu. Facebook uses it to provide users with post-related actions:   There are many more dropdown examples, but now, let‚Äôs take a look at how to implement some real-life examples in your code.  Building With Dropdowns  In this article, we will cover multiple React dropdown and form components examples. I will be using KendoReact , which provides a number of very useful and feature-rich components. We will implement dropdown menus and select components for real-life use cases using these components:   DropDownList  MultiSelect  AutoComplete  ComboBox  MultiColumnComboBox  DropDownTree   Below you can see what we will build in the interactive CodeSandbox.   Project Setup  Let‚Äôs start by setting up a new React project. To quickly scaffold one, you can use Create React App or Vite . For this demo, we are going to use Create React App. You can create a React project by running one of the below commands in your terminal.  npx create-react-app my-kendo-react-dropdowns  
cd my-kendo-react-dropdowns  
npm start // or yarn start  Now we need to install a few packages that are needed for using KendoReact Dropdowns.   Note: KendoReact is a commercial UI component library, and as a part of this you will need to provide a license key when you use the components in your React projects. You can snag a license key through a free trial or by owning a commercial license. For more information, you can head over to the KendoReact Licensing page .   // npm  
npm install --save @progress/kendo-react-dropdowns @progress/kendo-react-treeview @progress/kendo-react-animation @progress/kendo-react-intl @progress/kendo-react-data-tools @progress/kendo-react-common @progress/kendo-data-query @progress/kendo-react-buttons @progress/kendo-react-dateinputs @progress/kendo-react-inputs @progress/kendo-drawing @progress/kendo-licensing @progress/kendo-theme-default  
  
// yarn  
yarn add @progress/kendo-react-dropdowns @progress/kendo-react-treeview @progress/kendo-react-animation @progress/kendo-react-intl @progress/kendo-react-data-tools @progress/kendo-react-common @progress/kendo-data-query @progress/kendo-react-buttons @progress/kendo-react-dateinputs @progress/kendo-react-inputs @progress/kendo-drawing @progress/kendo-licensing @progress/kendo-theme-default  After installing the packages, let‚Äôs do a bit of a clean up. You can replace the styles from the App.css and contents of the App.js file with the code below.  src/App.js  import  '@progress/kendo-theme-default/dist/all.css' ;  import  "./App.css" ;  function  App ( )  {  return  < div  className = " App " > </ div > ;  }  export  default App ;   src/App.css  .App  {  max-width :  40 rem ;  margin :  2 rem auto ;  }   That‚Äôs it for the project setup. Let‚Äôs implement the first dropdown.  React DropDownList  Imagine a recipe website that allows users to search for recipes, videos and food-related articles. A user should be able to filter the results based on the category. Creating a category dropdown with KendoReact is very simple.  We will need two arrays‚Äîone to store the categories, and the second one with data that will be filtered by the selected category. There are two main things that will be rendered‚Äîthe DropDownList component that will display a list of available categories and the filtered results. Below you can see the code for the RecipeDropDownList component.  src/components/DropDownList/RecipeDropDownList.js  import  { useMemo , useState }  from  "react" ;  import  { DropDownList }  from  "@progress/kendo-react-dropdowns" ;  // Dropdown categories  const categories =  [ "all" ,  "recipe" ,  "video" ,  "article" ] ;  // Results data filtered using categories  const data =  [  { id :  1 , label :  "Best Ramen ever" , type :  "recipe" ,  } ,  { id :  2 , label :  "Top 10 Mexican dishes" , type :  "article" ,  } ,  { id :  3 , label :  "How to prepare a whole roast chicken" , type :  "video" ,  } ,  { id :  4 , label :  "Chilli Chicken Gnocchi" , type :  "recipe" ,  } ,  { id :  5 , label :  "Best 5 ice desserts for hot summer" , type :  "article" ,  } ,  ] ;  export  const  RecipeDropDownList  =  ( )  =>  {  // Store currently selected category  const  [ category , setCategory ]  =  useState ( "" ) ;  // Memoized results. Will re-evaluate any time selected  // category changes  const filteredData =  useMemo ( ( )  =>  {  if  ( ! category || category ===  "all" )  return data ;  return data . filter ( item => item . type === category ) ;  } ,  [ category ] ) ;  return  (  < section  className = " k-my-8 " >  < form  className = " k-form k-mb-4 " >  < label  className = " k-label k-mb-3 " > Category </ label >  < DropDownList  data = { categories }  onChange = { e =>  setCategory ( e . value ) }  />  </ form >  < section  className = " k-listgroup " >  < ul >  { filteredData . map ( item =>  {  return  (  < li  key = { item . id }  className = " k-listgroup-item " >  { item . label }  </ li >  ) ;  } ) }  </ ul >  </ section >  </ section >  ) ;  } ;   Now you can add it in the App.js file.  src/App.js  import  "@progress/kendo-theme-default/dist/all.css" ;  import  "./App.css" ;  import  { RecipeDropDownList }  from  "./components/DropDownList/RecipeDropDownList" ;  function  App ( )  {  return  (  < div  className = " App " >  < RecipeDropDownList  />  </ div >  ) ;  }  export  default App ;   Below you can see the recipe dropdown in action.   React MultiSelect  MultiSelect, as the name suggests, is a select dropdown that allows a user to select multiple items. In the previous example, we created a select dropdown that allows a user to select one category.  However, there are scenarios in which it‚Äôs useful to allow users to select multiple items. For example, a tech blog platform could allow a technical writer to select technologies that are related to an article. Just look at this article. If I were to specify some tags for it, I would probably choose JavaScript, React and KendoReact tags. Now, let‚Äôs implement a multiselect.  src/components/MultiSelect/TagsMultiSelect.js  import  { MultiSelect }  from  "@progress/kendo-react-dropdowns" ;  import  { useState }  from  "react" ;  const tags =  [  "JavaScript" ,  "TypeScript" ,  "React" ,  "Next" ,  "Vue" ,  "Nuxt" ,  "Node" ,  "Python" ,  ] ;  export  const  TagsMultiSelect  =  ( )  =>  {  const  [ selectedTags , setSelectedTags ]  =  useState ( [ ] ) ;  const  onChange  = event =>  setSelectedTags ( [ ... event . value ] ) ;  return  (  < form  className = " k-form k-my-8 " >  < label  className = " k-label k-mb-3 " > Related technologies </ label >  < MultiSelect  data = { tags }  value = { selectedTags }  onChange = { onChange }  autoClose = { false }  />  </ form >  ) ;  } ;   Again, update the App.js file to render our TagsMultiSelect component.  src/App.js  // other imports  import  { TagsMultiSelect }  from  "./components/MultiSelect/TagsMultiSelect" ;  function  App ( )  {  return  (  < div  className = " App " >  { /* ...other components */  }  < TagsMultiSelect  />  </ div >  ) ;  }  export  default App ;   In the gif below, you can see the TagsMultiSelect component in action.   React AutoComplete  There are a lot of websites that ask users to provide their personal details and where they live. Very often, a form like that contains a dropdown which allows users to select the country they live in. First, create a new file that will contain all the countries.  src/components/AutoComplete/countries.js  // From https://bitbucket.org/atlassian/atlaskit-mk-2/raw/4ad0e56649c3e6c973e226b7efaeb28cb240ccb0/packages/core/select/src/data/countries.js  export  const countries =  [  { label :  "Andorra"  } ,  { label :  "United Arab Emirates"  } ,  ...  //Pull the full, very long list of countries from this file: https://github.com/ThomasFindlay/kendo-react-dropdowns/blob/main/src/components/AutoComplete/countries.js  ...  { label :  "Zambia"  } ,  { label :  "Zimbabwe"  } ,  ] ;   Let‚Äôs make use of these countries and create a new React AutoComplete component.  src/components/AutoComplete/CountryAutoComplete.js  import  { countries }  from  "./countries" ;  import  { AutoComplete }  from  "@progress/kendo-react-dropdowns" ;  export  const  CountryAutoComplete  =  ( )  =>  {  return  (  < form  className = " k-form k-my-8 " >  < label  className = " k-label k-mb-3 " > Select Country </ label >  < AutoComplete  data = { countries }  textField = " label "  suggest  />  </ form >  ) ;  } ;   Now we can render the CountryAutoComplete in the App.js file.  src/App.js  // other imports  import  { CountryAutoComplete }  from  './components/AutoComplete/CountryAutoComplete'  function  App ( )  {  return  (  < div  className = " App " >  { /* ...other components */  }  < CountryAutoComplete  />  </ div >  ) ;  }  export  default App ;   Below you can see the country autocomplete component in action.   React ComboBox  The ComboBox component is quite similar to the DropDownList component we used previously but allows users to type in it. It also provides additional functionality, such as grouping and suggestions.  Let‚Äôs use project management software as an example. When creating a new task, you can assign it to an employee in your company. However, if your company has a lot of employees, it would be useful to see which department they are in, so it‚Äôs easier to find assignees.  src/components/ComboBox/AssignessComboBox.js  import  { ComboBox }  from  "@progress/kendo-react-dropdowns" ;  import  { useState }  from  "react" ;  const assignees =  [  { id :  1 , name :  "Chloe Williams" , occupation :  "Developer" ,  } ,  { id :  2 , name :  "Severus Snape" , occupation :  "Developer" ,  } ,  { id :  3 , name :  "Mark Smith" , occupation :  "Tech Support" ,  } ,  { id :  4 , name :  "Rosemary Adams" , occupation :  "Tech Support" ,  } ,  { id :  5 , name :  "Joe McDonalds" , occupation :  "Designer" ,  } ,  { id :  6 , name :  "Minerva McGonagall" , occupation :  "Designer" ,  } ,  ] ;  export  const  AssigneesComboBox  =  ( )  =>  {  const  [ selectedAssignee , setSelectedAssignee ]  =  useState ( null ) ;  const  onChange  = event =>  setSelectedAssignee ( event . value ) ;  return  (  < form  className = " k-form k-my-8 " >  < label  className = " k-label k-mb-3 " > Task Assignee </ label >  < ComboBox  data = { assignees }  value = { selectedAssignee }  onChange = { onChange }  textField = " name "  groupField = " occupation "  suggest  />  </ form >  ) ;  } ;   Again, don‚Äôt forget to add it to the App.js component.  src/App.js  // other imports  import  { AssigneesComboBox }  from  "./components/ComboBox/AssigneesComboBox" ;  function  App ( )  {  return  (  < div  className = " App " >  { /* ...other components */  }  < AssigneesComboBox  />  </ div >  ) ;  }  export  default App ;   Below you can see how it works. Note the labels ‚ÄúDeveloper,‚Äù ‚ÄúDesigner‚Äù and ‚ÄúTech Support.‚Äù   React MultiColumnComboBox  The MultiColumnComboBox works like the ComboBox we implemented in the previous section, but it can display multiple columns in the dropdown. Let‚Äôs enhance the previous task assignee example and display all details: ‚Äúid,‚Äù ‚Äúname‚Äù and ‚Äúoccupation‚Äù in the dropdown.  src/components/MultiColumnComboBox/AssigneesMultiColumnComboBox.js  import  { MultiColumnComboBox }  from  "@progress/kendo-react-dropdowns" ;  import  { useState }  from  "react" ;  const assignees =  [  { id :  1 , name :  "Chloe Williams" , occupation :  "Developer" ,  } ,  { id :  2 , name :  "Severus Snape" , occupation :  "Developer" ,  } ,  { id :  3 , name :  "Mark Smith" , occupation :  "Tech Support" ,  } ,  { id :  4 , name :  "Rosemary Adams" , occupation :  "Tech Support" ,  } ,  { id :  5 , name :  "Joe McDonalds" , occupation :  "Designer" ,  } ,  { id :  6 , name :  "Minerva McGonagall" , occupation :  "Designer" ,  } ,  ] ;  const columns =  [  { field :  "id" , header :  "ID" , width :  "9rem" ,  } ,  { field :  "name" , header :  "Name" , width :  "15rem" ,  } ,  { field :  "occupation" , header :  "Occupation" , width :  "15rem" ,  } ,  ] ;  export  const  AssigneesMultiColumnComboBox  =  ( )  =>  {  const  [ selectedAssignee , setSelectedAssignee ]  =  useState ( null ) ;  const  onChange  = event =>  setSelectedAssignee ( event . value ) ;  return  (  < form  className = " k-form k-my-8 " >  < label  className = " k-label k-mb-3 " > MultiColumn Task Assignee </ label >  < MultiColumnComboBox  data = { assignees }  columns = { columns }  value = { selectedAssignee }  onChange = { onChange }  textField = " name "  suggest  />  </ form >  ) ;  } ;   src/App.js  // other imports  import  { AssigneesMultiColumnComboBox }  from  "./components/MultiColumnComboBox/AssigneesMultiColumnComboBox" ;  function  App ( )  {  return  (  < div  className = " App " >  { /* ...other components */  }  < AssigneesMultiColumnComboBox  />  </ div >  ) ;  }  export  default App ;    React DropDownTree  Last but not least is the React DropDownTree component. It can be used to choose a single value from a hierarchical list. What is really interesting about this component, though, is the fact that it can be used to display a list of collapsible and expandable items.  Imagine a groceries website that allows an admin to assign food items to specific categories. For instance, an admin would be able to open a select dropdown that would have different categories like drinks and chilled food, as well as subcategories like water, juice or cheese. This is something we can implement with the DropDownTree component.   Here is the implementation. It requires a bit more code than previous examples and we need to use a few helper methods for managing expanded state and processing the dropdown tree data.  src/components/DropDownTree/FoodDropDownTree.js  import  { useCallback , useMemo , useState }  from  "react" ;  import  { DropDownTree }  from  "@progress/kendo-react-dropdowns" ;  import  { processTreeData , expandedState }  from  "./treeDataOperations" ;  const data =  [  { id :  1 , text :  "Drinks" , items :  [  { id :  2 , text :  "Water" ,  } ,  { id :  3 , text :  "Juice" ,  } ,  { id :  4 , text :  "Coffee & Tea" ,  } ,  ] ,  } ,  { id :  5 , text :  "Free From" , items :  [  { id :  6 , text :  "Gluten Free" ,  } ,  { id :  7 , text :  "Dairy Free" ,  } ,  { id :  8 , text :  "Lactose Free" ,  } ,  ] ,  } ,  { id :  9 , text :  "Chilled Food" , items :  [  { id :  10 , text :  "Cheese" ,  } ,  { id :  11 , text :  "Cooked Meat" ,  } ,  { id :  12 , text :  "Ready Meals" ,  } ,  ] ,  } ,  ] ;  const selectField =  "selected" ;  const expandField =  "expanded" ;  const dataItemKey =  "id" ;  const textField =  "text" ;  const subItemsField =  "items" ;  const fields =  { selectField , expandField , dataItemKey , subItemsField ,  } ;  export  const  FoodDropDownTree  =  ( )  =>  {  const  [ value , setValue ]  =  useState ( null ) ;  const  [ expanded , setExpanded ]  =  useState ( [ ] ) ;  const  onChange  = event =>  setValue ( event . value ) ;  const onExpandChange =  useCallback ( event =>  setExpanded ( expandedState ( event . item , dataItemKey , expanded ) ) ,  [ expanded ]  ) ;  const treeData =  useMemo (  ( )  =>  processTreeData ( data ,  { expanded , value ,  } , fields ) ,  [ expanded , value ]  ) ;  return  (  < form  className = " k-form k-my-8 " >  < label  className = " k-label k-mb-3 " > Select Food Category </ label >  < DropDownTree  data = { treeData }  textField = { textField }  onChange = { onChange }  dataItemKey = { dataItemKey }  selectField = { selectField }  expandField = { expandField }  onExpandChange = { onExpandChange }  />  </ form >  ) ;  } ;   src/components/DropDownTree/treeDataOperations.js  import  { filterBy }  from  "@progress/kendo-react-data-tools" ;  import  { mapTree , extendDataItem }  from  "@progress/kendo-react-common" ;  export  const  processTreeData  =  ( data , state , fields )  =>  {  const  { selectField , expandField , dataItemKey , subItemsField }  = fields ;  const  { expanded , value , filter }  = state ;  const filtering =  Boolean ( filter && filter . value ) ;  return  mapTree ( filtering ?  filterBy ( data ,  [ filter ] , subItemsField )  : data , subItemsField , item =>  {  const props =  {  [ expandField ] : expanded . includes ( item [ dataItemKey ] ) ,  [ selectField ] : value && item [ dataItemKey ]  === value [ dataItemKey ] ,  } ;  return filtering ?  extendDataItem ( item , subItemsField , props )  :  {  ... item ,  ... props } ;  }  ) ;  } ;  export  const  expandedState  =  ( item , dataItemKey , expanded )  =>  {  const nextExpanded = expanded . slice ( ) ;  const itemKey = item [ dataItemKey ] ;  const index = expanded . indexOf ( itemKey ) ; index ===  - 1  ? nextExpanded . push ( itemKey )  : nextExpanded . splice ( index ,  1 ) ;  return nextExpanded ;  } ;   Lastly, add the component in the App.js file.  src/App.js  // other imports  import  { FoodDropDownTree }  from  "./components/DropDownTree/FoodDropDownTree" ;  function  App ( )  {  return  (  < div  className = " App " >  { /* ...other components */  }  < FoodDropDownTree  />  </ div >  ) ;  }  export  default App ;   Wrap-up  That‚Äôs it! I hope you enjoyed this quick guide to dropdown menus with React. There are many use cases for dropdowns, and they are one of the most commonly used features on the web. We have covered how commonly used websites incorporate dropdowns and implemented six different React dropdown examples for real-life scenarios.  KendoReact offers a lot of feature-rich components that can be easily used for implementing a variety of features. Make sure to check out the React DropDowns documentation for more examples. You can find the full code for this tutorial in this GitHub repo .      DropDown , KendoReact , React            About the Author  Thomas Findlay  Thomas Findlay is a 5-star rated mentor, full-stack developer, consultant, technical writer and the author of ‚Äú React - The Road To Enterprise ‚Äù and ‚Äú Vue - The Road To Enterprise .‚Äù He works with many different technologies such as JavaScript, Vue, React, React Native, Node.js, Python, PHP and more. Thomas has worked with developers and teams from beginner to advanced and helped them build and scale their applications and products. Check out his Codementor page, and you can also find him on Twitter .     Related Posts     Web  React   React Calendar vs. React Scheduler: What‚Äôs the Difference and When To Use Them       Web  React   What‚Äôs Coming in React 18       Web  React   Generating PDF from HTML in React Demo: Exporting Invoices       Comments   Comments are disabled in preview mode.   Please enable JavaScript to view the comments powered by Disqus.      All articles  Topics    Web     Blazor    ASP.NET MVC    ASP.NET Core    ASP.NET AJAX    jQuery    Angular    React    Vue       Mobile     Xamarin    .NET MAUI       Desktop     WinUI    UWP    WinForms    WPF    Blazor Desktop/.NET MAUI       Design     UX    Design Systems       Productivity     Debugging    Reporting    Testing    Document Processing       People     Accessibility    Humanity      Release           Latest Stories in Your Inbox  Subscribe to be the first to get our expert-written articles and tutorials for developers!                 Email       Country/Territory    Select country/territory  USA  Canada  Bulgaria  Germany  United Kingdom  Australia  India  Afghanistan  Albania  Algeria  American Samoa  Andorra  Angola  Anguilla  Antarctica  Antigua and Barbuda  Argentina  Armenia  Aruba  Austria  Azerbaijan  Bahamas  Bahrain  Bangladesh  Barbados  Belgium  Belize  Benin  Bermuda  Bhutan  Bolivia  Bosnia and Herzegovina  Botswana  Bouvet Island  Brazil  British Indian Ocean Terr.  Brunei Darussalam  Burkina Faso  Burundi  Cambodia  Cameroon  Cabo Verde  Cayman Islands  Central African Republic  Chad  Chile  China  Christmas Island  Cocos (Keeling) Islands  Colombia  Comoros  Congo (Brazzaville)  Congo, the democratic republic of the  Cook Islands  Costa Rica  Cote d'Ivoire  Croatia (Hrvatska)  Curacao  Cyprus  Czechia  Denmark  Djibouti  Dominica  Dominican Republic  Ecuador  Egypt  El Salvador  Equatorial Guinea  Eritrea  Eswatini  Estonia  Ethiopia  Falkland Islands  Faroe Islands  Fiji  Finland  France  French Guiana  French Polynesia  French Southern Terr.  Gabon  Gambia  Georgia  Ghana  Gibraltar  Greece  Greenland  Grenada  Guadeloupe  Guam  Guatemala  Guernsey  Guinea  Guinea-Bissau  Guyana  Haiti  Heard and McDonald Is.  Honduras  Hong Kong  Hungary  Iceland  Indonesia  Iraq  Ireland  Israel  Italy  Jamaica  Japan  Jersey  Jordan  Kazakhstan  Kenya  Kiribati  Korea (the Republic of)  Kuwait  Kyrgyzstan  Lao People's Dem. Rep.  Latvia  Lebanon  Lesotho  Liberia  Libya  Liechtenstein  Lithuania  Luxembourg  Macao  Madagascar  Malawi  Malaysia  Maldives  Mali  Malta  Man, Isle of  Marshall Islands  Martinique  Mauritania  Mauritius  Mayotte  Mexico  Micronesia  Moldova  Monaco  Mongolia  Montenegro  Montserrat  Morocco  Mozambique  Myanmar  Namibia  Nauru  Nepal  Netherlands  New Caledonia  New Zealand  Nicaragua  Niger  Nigeria  Niue  Norfolk Island  Northern Mariana Is.  North Macedonia  Norway  Oman  Pakistan  Palau  Palestine, State Of  Panama  Papua New Guinea  Paraguay  Peru  Philippines  Pitcairn  Poland  Portugal  Puerto Rico  Qatar  Reunion  Romania  Rwanda  S.Georgia and S.Sandwich Is.  Saint Kitts and Nevis  Saint Lucia  Samoa  San Marino  Sao Tome and Principe  Saudi Arabia  Senegal  Serbia  Seychelles  Sierra Leone  Singapore  Slovakia  Slovenia  Solomon Islands  Somalia  South Africa  South Sudan  Spain  Sri Lanka  St. Helena  St. Pierre and Miquelon  St. Vincent and Grenadines  Sudan  Suriname  Svalbard and Jan Mayen Is.  Sweden  Switzerland  Taiwan  Tajikistan  Tanzania  Thailand  Timor-Leste  Togo  Tokelau  Tonga  Trinidad and Tobago  Tunisia  Turkey  Turkmenistan  Turks and Caicos Islands  Tuvalu  U.S. Minor Outlying Is.  Uganda  Ukraine  United Arab Emirates  Uruguay  Uzbekistan  Vanuatu  Vatican (Holy See)  Venezuela  Viet Nam  Virgin Islands (British)  Virgin Islands (U.S.)  Wallis and Futuna Is.  Western Sahara  Yemen  Zambia  Zimbabwe         State/Province   Select      Progress collects the Personal Information set out in our Privacy Policy and Privacy Policy for California Residents and uses it for the purposes stated in that policy. You have the right to request deletion of your Personal Information at any time. You can also ask us not to pass your Personal Information to third parties here: Do Not Sell My Info        Blog          I agree to receive email communications from Progress Software or its Partners , containing information about Progress Software‚Äôs products. I acknowledge my data will be used in accordance with Progress' Privacy Policy and understand I may withdraw my consent at any time.    We see that you have already chosen to receive marketing materials from us. If you wish to change this at any time you may do so by clicking here .    Thank you for your continued interest in Progress. Based on either your previous activity on our websites or our ongoing relationship, we will keep you updated on our products, solutions, services, company news and events. If you decide that you want to be removed from our mailing lists at any time, you can change your contact preferences by clicking here .       Subscribe                 Complete .NET Toolbox Telerik DevCraft Complete JavaScript Toolbox Kendo UI Get Products Free Trials Pricing Resources Demos Documentation Release History Forums Blogs Webinars Professional Services Partners Virtual Classroom Events Recognition Success Stories Testimonials Get in touch Contact Us USA: +1 888 365 2779 UK: +44 13 4483 8186 India: +91 406 9019447 Bulgaria: +359 2 8099850 Australia: +61 3 7068 8610  165k+  50k+  17k+  4k+  14k+ Contact Us  165k+  50k+  17k+  4k+  14k+ Telerik and Kendo UI are part of Progress product portfolio. Progress is the leading provider of application development and digital experience technologies. Company Technology Awards Press Releases Media Coverage Careers Offices Company Technology Awards Press Releases Media Coverage Careers Offices Copyright ¬© 2022 Progress Software Corporation and/or its subsidiaries or affiliates. All Rights Reserved. Progress, Telerik, Ipswitch, Chef, Kemp, Flowmon and certain product names used herein are trademarks or registered trademarks of Progress Software Corporation and/or one of its subsidiaries or affiliates in the U.S. and/or other countries. See Trademarks for appropriate markings. Terms of Use Site Feedback Privacy Center Security Center Do Not Sell My Personal Information Powered by Progress Sitefinity                
--
https://www.telerik.com/blogs/quick-guide-dropdown-menus-react

---
            React.js Examples           Ui   Templates  Material design  List  Cards  Infinite Scroll  Bootstrap  Table  Layout  Scroll  Single Page  Responsive  Style  Admin Templates  All UI     Media   Slides  Slider  Chart  Lightbox  Video  Gallery  Carousel  Images  Player  Audio  Music  Movies  Maps     Elements   Calculator  Drag  Tooltip  Notifications  Pagination  Toggle  Icons  Emoji  Progress  Loading  Svg  Accordion  Modals  Popup  Dialogs  Color  Clock  Avatar  Circular  Sticky     Input   Calendar  Form  Select  Date  Typography  Textarea  Message  Upload  Notes  Text  Search  Data  Editor  Autocomplete  Inbox  Time  Markdown  Input     Menu   Dropdown  Navbar  Navigator  Swipe  Tabbar  Sidebar  Intro  Button  Tabs  Drag/Drop  Dock  Fixed  Tree  Menu     More   Animation  Games  Mobile  Todo  Vote  Sortable  Weather  Resizable  Skillbars  Framework  Miscellaneous  Books  Overlay                              Dropdown  A collection of 34 posts     Dropdown    Apps    TypeScript    Hooks    UI    Nextjs    Javascript    Games    Tailwind CSS    WebSite    Redux    Starter    Images    State    API    Miscellaneous    Templates    Animation    Boilerplate    Editor    Chart    Todo    React Native    Form    Tool    Reactjs    Firebase    Calendar    Router    Ecommerce    Scroll    Generator    Table    Developer Tool    Portfolio Page    dApp    Input    Video    Blockchain    Ethereum    Layout    Chat    SVG    Dashboard    MongoDB    Authentication    Select    Search    Material Design                      Dropdown   Facebook inspired multi-level Dropdown menu    Facebook inspired multi-level Dropdown menu  21 September 2022                  Dropdown   Dropdown library based for Reactjs    Dropdown library based for Reactjs  09 August 2022                  Tabs   React Accessible, Responsive Tabs and Dropdown    React Accessible, Responsive Tabs and Dropdown  25 June 2022                  Select   A collection of highly extensible React components    A collection of highly extensible React components  24 April 2022                  Select   Highly customisable, minimalistic input x select field for React    Highly customisable, minimalistic input x select field for React  19 January 2022                  Tooltip   Floating UI: JavaScript positioning library for tooltips, popovers, dropdowns, and more    Floating UI: JavaScript positioning library for tooltips, popovers, dropdowns, and more  02 December 2021                  Select   React multiselect dropdown with search and various options    A React component which provides multi select functionality with various features like selection limit.  04 May 2021                  Dropdown   Simple Dropdown component for React    Simple Dropdown component for React.  02 April 2021                  Dropdown   A simple Hook for creating fully accessible dropdown menus in React    React Accessible Dropdown Menu Hook.  23 March 2021                  Dropdown   Unopinionated dropdown component for react    Unopinionated dropdown component for react.  08 March 2021                  Dropdown   A dropdown and auto-complete component with filtering and keyboard    Minimalistic dropdown and auto-complete component with filtering and keyboard support.  29 November 2020                  Dropdown   A customizable react dropdown component that only uses CSS    A customizable react dropdown component that only uses CSS.  25 July 2020                  Sidebar   Customizable and responsive react sidebar library with dropdown menus    Customizable and responsive react sidebar library with dropdown menus and unlimited number of nested submenus.  21 July 2020                  Select   Lightweight multiple selection dropdown component    Simple and lightweight multiple selection dropdown component with checkboxes, search and select-all.  07 May 2020                  Dropdown   A easy-to-use and highly adjustable ReactJS dropdown    A minimal, easy-to-use and highly adjustable dropdown component made with ReactJS.  28 April 2020                  Tooltip   A React hook for Portals which renders modals and tooltips    React hook for Portals, which renders modals, dropdowns, tooltips etc. to or else.  29 February 2020                  Dropdown   A Nice React Dropdown Component    A Nice React Dropdown Component.  04 November 2019                  Tooltip   Primitive to build things like tooltips dropdown menu's and pop-overs    Basically any kind of layer that can be toggled. Focus on what your layer should look like, and let react-laag take care of where and when to show it.  17 October 2019                  Hooks   A set of hooks to build WAI-ARIA compliant React dropdown components    A set of hooks to build simple, flexible, WAI-ARIA compliant React dropdown components.  10 August 2019                  Select   Async dropdown component with advanced search modal    This component is a combination of a combobox with asynchronous fetching of results and a modal search dialog for more filtering possibilities.  16 January 2019                  Select   Customizable dropdown select inspired by react-select    Customizable dropdown select for react.  26 December 2018                  Navbar   Navbar component that moves the navbar items to a dropdown    Navbar component that moves the navbar items to a dropdown, if they do not fit in the content area.  03 November 2018                  Dropdown   Non-prescriptive React.js dropdown toolkit    Non-prescriptive React.js dropdown toolkit.  03 November 2018                  Dropdown   Traps focus for accessible dropdowns and modal content    A generic focus management tool for components such as dialogs and dropdowns.  13 October 2018                  Select   Customizable and fast Dropdown Tree Select component for React    A lightweight and fast control to render a select component that can display hierarchical tree data.  06 October 2018                  Dropdown   React dropdown menu components    This project is a set of components for building menus with. This project works well for dropdown and autocomplete menus.  29 September 2018                  Dropdown   React component for positioning an element aligned to another    This is a React component for anchoring a fixed position element, such as a dropdown menu, to the edge of an element on the page.  02 September 2018                  Dropdown   A dead simple dropdown component for React    Simple Dropdown component for React, inspired by react-select.  20 August 2018                  Menu   A simple dropdown menu for React with Bootstrap icon trigger    A simple Dropdown Menu for React. Commonly used as a 'User Settings' menu on websites where users login.  29 July 2018                  Dropdown   Dropdown ui component for react    react dropdown component.  07 June 2018                  Navbar   Navbar component that moves the navbar items to a dropdown    Navbar component that moves the navbar items to a dropdown, if they do not fit in the content area.  18 May 2018                  Dropdown   A visual editor for structured JSON data available as a simple drop-in React component    Schema-aware editor for structured JSON objects (drop-in React component)  10 April 2018                  Autocomplete   A set of primitives to build WAI-ARIA compliant React autocomplete components    Primitives to build simple, flexible, WAI-ARIA compliant enhanced input React components  10 April 2018                  Select   A lightweight and fast control to render a select component    A lightweight and fast control to render a select component that can display hierarchical tree data.  17 January 2018              Load More                    Tags     Apps  1002      TypeScript  563      Hooks  338      UI  307      Nextjs  281      Javascript  239      Games  234      Tailwind CSS  232      WebSite  226      Redux  202      Starter  158      Images  156      State  151      API  147      Miscellaneous  144      Templates  140      Animation  137      Boilerplate  134      Editor  132      Chart  127      Todo  121      React Native  116      Form  115      Tool  115      Reactjs  114      Firebase  111      Calendar  107      Router  104      Ecommerce  102      Scroll  92       Recent Posts      Fullstack todo-app serverless aws-lambda-function dynamoDB s3-bucket auth0   Oct 15, 2022      Example of a custom route transitions controller for nextJS   Oct 15, 2022      A Picture Puzzle build with React   Oct 15, 2022      3D perspective carousel with React   Oct 15, 2022      Pagination Control using React and Bootstrap   Oct 15, 2022                   About | Contact | Privacy Policy | Submit A Project     Powered by React.js Examples             
--
https://reactjsexample.com/tag/dropdown/

---
